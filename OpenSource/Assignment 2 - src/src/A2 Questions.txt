Assignment 2

Work in your A2 Groups.  Group LMS submission of code.

All English answers are to be answered individually through an LMS quiz.  
One quiz submission per person.

Assignment Objectives:
Experience the following:
	* Time it takes to open thousands of text files
	* That searching by a loop on text is slow
	* Indexing has to be maintained
	* Advantages and disadvantages of serializing collections

For de-serialization, use the provided Employee and LargeEmployee files.  You should not need to change either of these files 
in this assignment.

1.  Code (already done for you): Print the data contained in each file in "\simple\" to the console.

2.  Code (already done for you): Instead of printing the text from those files, create an Employee instance from the
data in the files and use the Employee's toString method to print each employee's data to the console.

3.  Code (Expand on the code from Q2): Add code to the Q2 solution to iterate through the files in \long\ and print the 
Employee data they contain.

4.  English: What was the performance time, in milliseconds, for 3?    
1259.01917 ms

5.a)  Code (add classes, methods): Use \long serialized\ instead to see if reading from a serialized version of Employee
affects performance.

5.b) English: What was the performance time, in milliseconds, for 5a?
1790.560235 ms

6.  English: What advantages and disadvantages does serialization have on your code, on performance, or 
on maintenance?  Take a look at http://www.ibm.com/developerworks/library/j-5things1/ before you answer.

Advantages:
Serialization allows for refactoring
Sensitve data can be obscured

Disadvantages:
Serialization is not secure
Encrypting it must be managed independently
Performance is slower (Slightly)

7.  Code (add classes, methods): What about storing all those employees in a single file, instead of 10,000 files?  Instead of 
simply writing the data for 10,000 employees to the console, create a HashMap of employees and serialize _that_ to disk.

8.a)  English: What advantages and disadvantages does storing all 10,000 employees in a single serialized HashMap have 
on your code, on performance, or on maintenance? (Use your same performance routine to compare).
Advantages:
Increases performance
All files are in one location

Disadvantages:
Code would be more complicated

8.b) English: What happens to memory utilization in your application when loading a large hashmap of employees 
at application startup?
The hashmap uses a large amount of the memory for a short amount of time

9.  English: Assume your application is starting cold, and you'll need to print the data for employee id 1001.  Which 
approach to storing and accessing data would you select, and why?
Serialization, because it wouldn't use a lot of memory initially and it would be easy to find the employee id and print the data.

10.  Code (add classes, methods): Print the employee id of Laurie Martin, hired in 2006.

11.  Code (add classes, methods): Does your solution to 10 feel inefficient?  Have you thought of maintaining some kind 
of index to speed searching by last name?  Create one so you only have to iterate through the employees once, 
thereafter using the index for lookup. (Think of a better solution?  Let me know about it!)

12.  English: What happens to your index if the user adds 100 more employees?  How will you update it?
Read in the files of the employees, and add it to the hash map

13.  English: Will you serialize and store your index, or build it on the fly for each query?  Or build it on each run of the 
application?  Why?  
Serialize and store it, because it would be faster. We don't have to update the index unless we are changing the amount of employees.

14.  Code (add classes, methods): Our Employee class just got a little fatter!  For a reason unknown to us, the 
Employee class has a byte array of data that we must store and retrieve.  Using \large\ and \large serialized\, 
print all the employee data EXCEPT the byte array to the console. 

15.  English: Each Employee file takes up 40KB on disk.  How much space would our original 10,000 employees take up on disk?
400MB

16.  English: How the increase in data stored per employee instance affect your response to 6 (serializing and storing
all employees to a single file or storing/loading them all in a HashMap)?

17.  English: Now that we must store a large(r) amount of data per employee, which storage mechanism will you select, and why?
Hashmap, because even though the data will be a bit harder to find, it is all compacted into one file in one location.



 



 
